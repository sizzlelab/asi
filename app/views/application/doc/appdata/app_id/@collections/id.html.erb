 <h1><code>/appdata/&lt;app_id&gt;/@collections/&lt;id&gt;</code></h1>
 
 <p>A resource for a specific collection of data.</p>
 
 <% returns = { "200" => "",
                "403" => "The current combination of application and user is not allowed to change this collection.",
                "404" => "The collection with the specified id does not exist." }

    methods = [ { :name => "GET",
                  :description => "Returns this collection. If this collection contains references to other collections,
                                    those without read-access for the current user are hidden automatically from the results.",
                  :parameters => [{  :count => "The number of items per page wanted to results. If this parameter is not
                                                submitted, results will include all the items."},
                                  {  :startIndex => "Index of the first element that is wanted to results. The parameter <code>
                                                    count</code> will define how many items will be returned onwards from <code>startIndex</code>.
                                                    Note that the index of the first item is 1 not 0." }
                                                    
                                  ],
                  :returns => returns.merge({ "403" => returns["403"].gsub("change", "see"), "200" => "The result contains fields
                                            <code>startIndex</code> (0 means it was not set by the request), <code>itemsPerPage</code> and <code>totalResults</code> specifying 'what page'
                                            of the results is returned."}) },

                { :name => "POST",
                  :description => "Adds a new item to the collection.",
                  :parameters => [ { :content_type => "The content type of the new collection item. The content types currently
                                                       supported are <code>text/*</code>, <code>image/*</code> 
                                                       and <code>collection</code> (a reference to an other collection)." },
                                   { :file => "A file to be added to the collection (optional)." },
                               #    { :title => "The title of the item. If a file is given or content_type is not
                               #                <code>text/*</code>, this parameter is ignored." },
                                   { :body => "The body of the item. If a file is given or content_type is not <code>text/*</code>,
                                               this parameter is ignored." },
                                   { :collection_id => "Id of an existing collection where the reference will point to. If content_type
                                                        is not <code>collection</code> this parameter is ignored.", }           
                                 ],
                  :returns => returns.merge({ "400" => "A malformed or unsupported image type was uploaded." }) },

                { :name => "PUT",
                  :description => "Updates the attributes of the collection.",
                  :parameters => [ { :title => "The title describing the collection.", },
                                   { :read_only => "Whether the new collection is read only. Read only collections can be written
                                                    to only by their owner; otherwise, the owner and their friends all have write
                                                    access. An empty value, '0' or 'false' are interpreted as <code>false</code>.
                                                    All other values are <code>true</code>." },
                                    { :tags => "Describing keywords for the collection. Can be a comma-separated list (,), although the search
                                              currently supports only exact string matching, so use of only one tag is currently recommended." },
                                   { :metadata => [{ :any_key => "Any string" }, { :another_key => "Another string" } ] } ],
                  :returns => returns },

                { :name => "DELETE",
                  :description => "Deletes the collection. The non-reference items in the collection are also deleted.",
                  :returns => returns.merge({ "403" => returns["403"].gsub("change", "delete") }) } ] %>
 
 <%= render :partial => "doc/methods", :locals => { :methods => methods } %>

 <h2>Subresources</h2>
 <li>
   <a href="doc/appdata/app_id/@collections/id/@items/item_id"><tt>/appdata/&lt;app_id&gt;/@collections/&lt;id&gt;/@items/&lt;item_id&gt;</tt></a> &ndash; 
   a specific item of the collection
 </li>